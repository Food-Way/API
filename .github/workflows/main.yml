name: CI/CD Backend - Foodway

on:
  push:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        run: mvn clean package
        working-directory: ./API

      - name: Run Unit Tests
        run: mvn test
        working-directory: ./API

      - name: Run Integration Tests
        run: mvn verify
        working-directory: ./API

      - name: Check Code Coverage
        run: mvn jacoco:report
        working-directory: ./API

      - name: List files for debugging
        run: ls -la API/target

      - name: Verify JAR File
        run: ls -la ./API/target/

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/foodway-api:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/foodway-api:latest

  deploy-to-aws:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.2.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Terraform Init
        run: terraform init
        working-directory: API/infra

      - name: Terraform Validate
        run: terraform validate
        working-directory: API/infra

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: API/infra

      - name: Get EC2 private IPs
        id: get_ips
        run: |
          ec2_01_ip=$(terraform output -raw private_ec2_01_private_ip | tr -d '"')
          ec2_02_ip=$(terraform output -raw private_ec2_02_private_ip | tr -d '"')
          if [ -z "$ec2_01_ip" ] || [ -z "$ec2_02_ip" ]; then
            echo "Failed to get EC2 IPs" >&2
            exit 1
          fi
          {
            echo "EC2_01_IP<<EOF"
            echo "$ec2_01_ip"
            echo "EOF"
            echo "EC2_02_IP<<EOF"
            echo "$ec2_02_ip"
            echo "EOF"
          } >> $GITHUB_ENV
        working-directory: API/infra

      - name: Create tf_key.pem file
        run: |
          echo "${{ secrets.TF_KEY }}" > tf_key.pem
          chmod 600 tf_key.pem
        shell: bash

      - name: Install netcat
        run: sudo apt-get install -y netcat

      - name: Health Check for backend-01 Server with Bastion Host
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.BASTION_HOST }}
          username: ${{ secrets.BASTION_USER }}
          key: ${{ secrets.BASTION_SSH_KEY }}
          script: |
            if ssh -o StrictHostKeyChecking=no -i /home/ubuntu/.ssh/ssh_key.pem ${{ secrets.SERVER_USER }}@${{ env.EC2_01_IP }} "nc -z -w5 localhost 22"; then
              echo "backend-01 is up"
            else
              echo "backend-01 is down"
              exit 1
            fi

      - name: Health Check for backend-02 Server with Bastion Host
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.BASTION_HOST }}
          username: ${{ secrets.BASTION_USER }}
          key: ${{ secrets.BASTION_SSH_KEY }}
          script: |
            if ssh -o StrictHostKeyChecking=no -i /home/ubuntu/.ssh/ssh_key.pem ${{ secrets.SERVER_USER }}@${{ env.EC2_02_IP }} "nc -z -w5 localhost 22"; then
              echo "backend-02 is up"
            else
              echo "backend-02 is down"
              exit 1
            fi

      - name: Deploy to backend-01 Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.BASTION_HOST }}
          username: ${{ secrets.BASTION_USER }}
          key: ${{ secrets.BASTION_SSH_KEY }}
          script: |
            if ssh -o StrictHostKeyChecking=no -i /home/ubuntu/.ssh/ssh_key.pem ${{ secrets.SERVER_USER }}@${{ env.EC2_01_IP }} "nc -z -w5 localhost 22"; then
              sudo docker-compose -f /home/ubuntu/AWS/docker-compose.yml down
              sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/foodway-api
              sudo docker-compose -f /home/ubuntu/AWS/docker-compose.yml up -d
            EOF

      - name: Deploy to backend-02 Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.BASTION_HOST }}
          username: ${{ secrets.BASTION_USER }}
          key: ${{ secrets.BASTION_SSH_KEY }}
          script: |
            if ssh -o StrictHostKeyChecking=no -i /home/ubuntu/.ssh/ssh_key.pem ${{ secrets.SERVER_USER }}@${{ env.EC2_02_IP }} "nc -z -w5 localhost 22"; then
              sudo docker-compose -f /home/ubuntu/AWS/docker-compose.yml down
              sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/foodway-api
              sudo docker-compose -f /home/ubuntu/AWS/docker-compose.yml up -d
            EOF
